C166 COMPILER V7.53.0.0, SETTINGS                                                          03/26/2018 10:37:43 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE SETTINGS
OBJECT MODULE PLACED IN .\firmwares\settings.obj
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE settings.c BROWSE MOD167 DEBUG TABS(2) OBJECT(.\firmwares\settings.obj) 

 stmt lvl     source

    1         #include "settings.h"
    2         #include "flash.h"
    3         
    4         tSettings MainSettings;
    5         
    6         /*
    7         Дополнительный блок настроек для 3 диап. с другой характер
             -истикой импульсного питания
    8         */
    9         
   10         tSettings MainSettingsExt;
   11         
   12         
   13         void  Settings_Init()
   14         { 
   15  1        /*if(!SETTINGS_Load())
   16  1        {
   17  1          SETTINGS_Default();
   18  1          SETTINGS_Save();
   19  1        }*/
   20  1        if(!Settings_Load((uint16*)&MainSettings,sizeof(tSettings),BASE_SET_ADDRESS)){
   21  2          Settings_Default();
   22  2          Settings_Save((uint16*)&MainSettings,sizeof(tSettings),BASE_SET_ADDRESS);
   23  2        }
   24  1        //загрузка настроек для расширенного диапазона
   25  1        #ifdef RANGE3
   26  1        if(!Settings_Load((uint16*)&MainSettingsExt,sizeof(tSettings),EXT_SET_ADDRESS)){
   27  2          Settings_DefautlExt();
   28  2          Settings_Save((uint16*)&MainSettingsExt,sizeof(tSettings),EXT_SET_ADDRESS);
   29  2        }
   30  1        #endif
   31  1      }
   32         
   33         void  Settings_Default()
   34         {
   35  1        int i = 0;
   36  1        uint16  limitMin = 0;
   37  1        uint16  limitMax = 0;
   38  1        
   39  1          MainSettings.pulsePwrPeriod = 100;  
   40  1          MainSettings.pulseDuration = 100;
   41  1          MainSettings.modeValue = 1;
   42  1          
   43  1            MainSettings.mSliderSize = 10;
   44  1            MainSettings.mDeadTime = 0.0006f;
   45  1          
   46  1          #ifdef RANGE3
   47  1            MainSettings.mEfficiency = 8.17f;
   48  1            MainSettings.mSensivity = 1.26f;
   49  1            
   50  1              limitMin = 10;
   51  1              limitMax = 1280;
   52  1          #endif
   53  1        
   54  1          #ifdef RANGE2
C166 COMPILER V7.53.0.0, SETTINGS                                                          03/26/2018 10:37:43 PAGE 2   

                    MainSettings.mEfficiency = 8.63f;
                    MainSettings.mSensivity = 383.f;
                    
                      limitMin = 550;
                      limitMax = 1280;
                  #endif
   61  1          
   62  1          #ifdef RANGE1
                    MainSettings.mEfficiency = 8.83f;
                    MainSettings.mSensivity = 1405.f;
                      limitMin = 0;
                      limitMax = 1280;
                  #endif
   68  1            MainSettings.rangeLimits = (uint32)((uint32)limitMax << 16)|limitMin;
   69  1        
   70  1        for(i = 0;i<FACTORS_COUNT;i++)
   71  1          MainSettings.correctionFactors[i] = 1.0f;
   72  1      }
   73         void  Settings_DefautlExt()
   74         {
   75  1        uint8 i = 0;
   76  1      
   77  1        MainSettingsExt.pulsePwrPeriod = 100; 
   78  1        MainSettingsExt.pulseDuration = 20;
   79  1        MainSettingsExt.modeValue = 1;
   80  1        
   81  1        MainSettingsExt.mDeadTime = 0.0006f;
   82  1        MainSettingsExt.mEfficiency = 8.17f;
   83  1        MainSettingsExt.mSensivity = 1.26f;
   84  1        MainSettingsExt.rangeLimits = (uint32)((uint32)4000 << 16)|150;
   85  1        
   86  1        for(i = 0;i<FACTORS_COUNT;i++)
   87  1          MainSettingsExt.correctionFactors[i] = 1.0f;
   88  1      }
   89         
   90         void  Settings_Save(uint16  *pData,uint16 uDataSize,uint32  uAddress)
   91         {
   92  1        int i = 0,addr_counter = 0;
   93  1        
   94  1         uint16  *pSettings = (tSettings*)pData;
   95  1         uint16 sizeSettings = uDataSize;
   96  1        
   97  1         uint16 chkSum = 0;
   98  1        
   99  1         for(i = 0;i<sizeSettings >> 1;i++)
  100  1            chkSum += *(pSettings + i);
  101  1        
  102  1        FLASH_EraseSector(uAddress);
  103  1        FLASH_FSRControl();
  104  1        
  105  1        FLASH_WriteWord(uAddress,chkSum);
  106  1        FLASH_FSRControl();
  107  1        
  108  1        for(i = 0;i<sizeSettings;i+=2)
  109  1        {
  110  2          FLASH_WriteWord((uAddress+2) + i,*(pSettings + addr_counter));
  111  2          FLASH_FSRControl();
  112  2          
  113  2      
  114  2          addr_counter++;
  115  2        }
  116  1      }
C166 COMPILER V7.53.0.0, SETTINGS                                                          03/26/2018 10:37:43 PAGE 3   

  117         uint8 Settings_Load(uint16  *pData,uint16 uDataSize,uint32  uAddress)
  118         {
  119  1        int i = 0;
  120  1        unsigned int far *addressChkSum = (unsigned int far *) uAddress;
  121  1        unsigned int far *addressData = (unsigned int far *) (uAddress+2);
  122  1        
  123  1        uint16  *pSettings = (tSettings*)pData;
  124  1        uint16  dataSize = uDataSize;
  125  1        uint16  chkSum = 0;
  126  1        
  127  1        for(i = 0;i<dataSize >> 1;i++){
  128  2          chkSum += *(addressData + i);
  129  2      
  130  2        }
  131  1      
  132  1        if(chkSum != *addressChkSum)
  133  1          return 0;
  134  1        
  135  1        
  136  1        for(i = 0;i<dataSize >> 1;i++){
  137  2          *(pSettings + i) = *(addressData + i);
  138  2          
  139  2        }
  140  1        return 1;
  141  1      }
  142         
  143         void  SETTINGS_Save()
  144         {
  145  1        int i = 0,addr_counter = 0;
  146  1        
  147  1         uint16  *pSettings = (tSettings*)&MainSettings;
  148  1         uint16 sizeSettings = sizeof(MainSettings);
  149  1        
  150  1         uint16 chkSum = 0;
  151  1        
  152  1         for(i = 0;i<sizeSettings >> 1;i++)
  153  1            chkSum += *(pSettings + i);
  154  1        
  155  1        FLASH_EraseSector(0x22000);
  156  1        FLASH_FSRControl();
  157  1        
  158  1        FLASH_WriteWord(0x22000,chkSum);
  159  1        FLASH_FSRControl();
  160  1        
  161  1        for(i = 0;i<sizeSettings;i+=2)
  162  1        {
  163  2          FLASH_WriteWord(0x22002 + i,*(pSettings + addr_counter));
  164  2          FLASH_FSRControl();
  165  2          
  166  2      
  167  2          addr_counter++;
  168  2        }
  169  1      }
  170         uint8 SETTINGS_Load()
  171         {
  172  1        int i = 0;
  173  1        unsigned int far *addressChkSum = (unsigned int far *) 0x022000;
  174  1        unsigned int far *addressData = (unsigned int far *) 0x022002;
  175  1        
  176  1        uint16  *pSettings = (tSettings*)&MainSettings;
  177  1        uint16  dataSize = sizeof(MainSettings);
  178  1        uint16  chkSum = 0;
C166 COMPILER V7.53.0.0, SETTINGS                                                          03/26/2018 10:37:43 PAGE 4   

  179  1        
  180  1        for(i = 0;i<dataSize >> 1;i++){
  181  2          chkSum += *(addressData + i);
  182  2      
  183  2        }
  184  1      
  185  1        if(chkSum != *addressChkSum)
  186  1          return 0;
  187  1        
  188  1        
  189  1        for(i = 0;i<dataSize >> 1;i++){
  190  2          *(pSettings + i) = *(addressData + i);
  191  2          
  192  2        }
  193  1        return 1;
  194  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         812     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =         140     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
