C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE PROCESS
OBJECT MODULE PLACED IN process.OBJ
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE process.c BROWSE MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         #include "process.h"
    2         #include "protocol.h"
    3         #include "settings.h"
    4         #include "can.h"
    5         
    6         uint8   firstMeasureCounter = 0;
    7         uint8   sliderCounter = 0;
    8         uint16  sensorCnt[SENSORS];
    9         float   sliderQuery[SLIDER_SIZE];
   10         
   11         eAutoModeState  autoMode;
   12         
   13         void Process_SetAutoMode(eAutoModeState State)
   14         {
   15  1        autoMode = State;
   16  1      }
   17         uint8 Process_GetAutoModeStatus()
   18         {
   19  1        return autoMode;
   20  1      }
   21         
   22         void  Process_Initializetion(void)
   23         {
   24  1        CC8IC = 0x0070;
   25  1        CC9IC = 0x0071;
   26  1        CC10IC = 0x0072;
   27  1        CC11IC = 0x0073;
   28  1        CC12IC = 0x0074;
   29  1        CC13IC = 0x0075;
   30  1        CC14IC = 0x0076;
   31  1        CC15IC = 0x0077;
   32  1        
   33  1        T2IC = 0x0078;
   34  1        T3IC = 0x0079;
   35  1        T4IC = 0x007A;
   36  1        T5IC = 0x007B;
   37  1        memset(sensorCnt,0,sizeof(sensorCnt));
   38  1        memset(sliderQuery,0,sizeof(sliderQuery));
   39  1        
   40  1        autoMode = AUTO_OFF;
   41  1      }
   42         
   43         /*
   44           –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø—É–ª—å—Å–∞ —Å—á—ë—Ç—á–∏–∫–∞
   45           1. –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
   46           2. –°–Ω–∏–º–∞–µ–º –ø–∏—Ç–∞–Ω–∏–µ  –Ω–∞ —Å—á—ë—Ç—á–∏–∫–∞—Ö –Ω–∞ 100us
   47         */
   48         
   49         void Process_EXIN1()  interrupt CC8IC_VEC
   50         {
   51  1        
   52  1        T7 = 0xFFFF;
   53  1        sensorCnt[0]++;
   54  1      }
   55         void Process_EXIN2()  interrupt CC9IC_VEC
C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 2   

   56         {
   57  1        T7 = 0xFFFF;
   58  1        sensorCnt[1]++;
   59  1        
   60  1      }
   61         void Process_EXIN3()  interrupt CC10IC_VEC
   62         {
   63  1        T7 = 0xFFFF;
   64  1        sensorCnt[2]++;
   65  1      }
   66         void Process_EXIN4()  interrupt CC11IC_VEC
   67         {
   68  1        T7 = 0xFFFF;
   69  1        sensorCnt[3]++;
   70  1      }
   71         void Process_EXIN5()  interrupt CC12IC_VEC
   72         {
   73  1        T7 = 0xFFFF;
   74  1        sensorCnt[4]++;
   75  1      }
   76         void Process_EXIN6()  interrupt CC13IC_VEC
   77         {
   78  1        T7 = 0xFFFF;
   79  1        sensorCnt[5]++;
   80  1      }
   81         void Process_EXIN7()  interrupt CC14IC_VEC
   82         {
   83  1        T8 = 0xFFFF;
   84  1        sensorCnt[6]++;
   85  1      }
   86         void Process_EXIN8()  interrupt CC15IC_VEC
   87         {
   88  1        T8 = 0xFFFF;
   89  1        sensorCnt[7]++;
   90  1      }
   91         void Process_EXIN9()  interrupt T5IC_VEC
   92         {
   93  1        T8 = 0xFFFF;
   94  1        
   95  1        sensorCnt[8]++;
   96  1      }
   97         void Process_EXIN10() interrupt T4IC_VEC
   98         {
   99  1        T8 = 0xFFFF;
  100  1        
  101  1        sensorCnt[9]++;
  102  1      }
  103         void Process_EXIN11() interrupt T3IC_VEC
  104         {
  105  1        T8 = 0xFFFF;
  106  1        
  107  1        sensorCnt[10]++;
  108  1      }
  109         void Process_EXIN12() interrupt T2IC_VEC
  110         {
  111  1        T8 = 0xFFFF;
  112  1        
  113  1        sensorCnt[11]++;
  114  1      }
  115         
  116         void  Process_MainProc()  interrupt T0IC_VEC
  117         {
C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 3   

  118  1         uint8  *pSendPackage;
  119  1         uint8  mStartRangeAuto2[]  = {0x02,0x01,0x01};
  120  1         uint8  mStartRangeAuto3[]  = {0x03,0x01,0x01};
  121  1      /*  float currentDose = 0;
  122  1        
  123  1        currentDose = Process_CalculateDoseRate();
  124  1        
  125  1        
  126  1        Protocol_HeaderDataMsg();
  127  1        Protocol_CounterMsg(sensorCnt);
  128  1        Protocol_DoseRateMsg(currentDose);
  129  1        */
  130  1        //Protocol_ResponseDataPackaje(E_NEWDATA_RESPONSE);
  131  1        uint8 i = 0;
  132  1        
  133  1        uint16  rangeMin = (uint16)(MainSettings.rangeLimits & 0xFFFF);
  134  1        uint16  rangeMax = (uint16)( (MainSettings.rangeLimits >> 16) & 0xFFFF);
  135  1        
  136  1        
  137  1        float currentDose = 0;
  138  1        float averageDose = 0;
  139  1        float counterRate = 0;
  140  1        uint16  uCntRate = 0;
  141  1          currentDose = Process_CalculateCurrentDoseRate();
  142  1          counterRate = Process_CalculateCountingRate();
  143  1        
  144  1        uCntRate = counterRate;
  145  1        
  146  1        if(Process_GetAutoModeStatus() == AUTO_ON)
  147  1        {
  148  2        
  149  2          //–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  150  2          #ifdef MAIN_RANGE
  151  2            //–µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –º–µ–Ω—å—à–µ –Ω–∏–∂–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–
             -ª–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –≤–∫–ª—é—á–∞–µ–º –Ω–∏–∂–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
  152  2            if((counterRate <= rangeMin) && firstMeasureCounter >= 2){
  153  3              
  154  3              Process_Stop();
  155  3              CAN_SendMessage(TX_CHANGE_RANGE,mStartRangeAuto2,3);
  156  3            }
  157  2          #else
                    //–µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Å—á—ë—Ç–∞ –≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞, —Ç–æ –≤–∫–ª—é—á–∞–µ–º 
             -–≤–µ—Ä—Ö–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    if(counterRate >= rangeMax){
                      
                      Process_Stop();
                      CAN_SendMessage(TX_CHANGE_RANGE,mStartRangeAuto3,3);
                    }
                  #endif
  165  2          }
  166  1        
  167  1        if(sliderCounter<SLIDER_SIZE){
  168  2          sliderQuery[sliderCounter] = currentDose;
  169  2          sliderCounter++;
  170  2        }
  171  1        
  172  1        else{
  173  2          memcpy(&sliderQuery[0],&sliderQuery[1],sizeof(float) * (SLIDER_SIZE - 1));
  174  2          sliderQuery[SLIDER_SIZE - 1] = currentDose;
  175  2        }
  176  1        for(i = 0;i<SLIDER_SIZE;i++)
  177  1          averageDose += sliderQuery[i];
C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 4   

  178  1        
  179  1        averageDose = averageDose * 0.5f;
  180  1        
  181  1        //—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
  182  1        /*
  183  1          4 —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 8 –±–∞–π—Ç = 32 –±–∞–π—Ç–∞
  184  1        
  185  1          1 - –∑–∞–≥–æ–ª–æ–≤–æ–∫ 
  186  1          2 - 4 - –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
  187  1        */
  188  1        pSendPackage = (uint8*)malloc(sizeof(uint8) * 32);
  189  1        
  190  1        if(pSendPackage){
  191  2          pSendPackage[0] = 0x40;
  192  2          pSendPackage[1] = 0xFF;
  193  2          
  194  2          memcpy(pSendPackage + 2,&uCntRate,sizeof(uint16));
  195  2          memcpy(pSendPackage + 4,&averageDose,sizeof(float));
  196  2          
  197  2          memcpy(pSendPackage + 8,sensorCnt,sizeof(uint16) * SENSORS);
  198  2          
  199  2          CAN_SendDataPackage(TX_DATA,pSendPackage,32);
  200  2        }
  201  1        
  202  1        
  203  1        free(pSendPackage);
  204  1        /*
  205  1        Protocol_HeaderDataMsg(counterRate,averageDose);
  206  1        Protocol_CountersMsg(sensorCnt);
  207  1        Protocol_CountersMsg(sensorCnt + 4);
  208  1        Protocol_CountersMsg(sensorCnt + 8);
  209  1        */
  210  1        
  211  1        memset(sensorCnt,0,sizeof(sensorCnt));//–æ–±–Ω—É–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å—á—ë—Ç—á–∏–∫–æ–≤
  212  1      }
  213         
  214         float Process_CalculateCurrentDoseRate()
  215         {
  216  1        uint16  i = 0;
  217  1        float numerator = 0;
  218  1        float denominator = 0;
  219  1        float dose = 0;
  220  1        
  221  1        float leftPart = 0;
  222  1        float rightPart = 0;
  223  1        
  224  1          leftPart = 1.0f / (MainSettings.mSensivity * MainSettings.mEfficiency * 1);
  225  1            
  226  1            for(i = 0;i<SENSORS;i++)
  227  1            {
  228  2              numerator = sensorCnt[i] * MainSettings.correctionFactors[i];
  229  2              denominator = 1.0f - (sensorCnt[i] * MainSettings.mDeadTime);
  230  2              
  231  2              rightPart = rightPart + (numerator / denominator);
  232  2            }
  233  1        dose = leftPart * rightPart;
  234  1        
  235  1        return dose;
  236  1      }
  237         float Process_CalculateCountingRate()
  238         {
  239  1        float cntRate = 0;
C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 5   

  240  1        uint16  i = 0;
  241  1        
  242  1          for(i = 0;i<SENSORS;i++)
  243  1              cntRate += sensorCnt[i];
  244  1            cntRate = cntRate / (float)(MainSettings.mEfficiency /* SENSORS*/); //06.03.17 - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤
             -–∫–∞ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Å–∫—Ä–æ—Ä–æ—Å—Ç–∏ —Å—á—ë—Ç–∞
  245  1        
  246  1        if(firstMeasureCounter < 2)
  247  1          firstMeasureCounter++;
  248  1        
  249  1        return cntRate;
  250  1      }
  251         void Process_Start()
  252         {
  253  1        Process_Stop();
  254  1        
  255  1        sliderCounter = 0;
  256  1        firstMeasureCounter = 0;
  257  1        
  258  1        memset(sensorCnt,0,sizeof(uint16) * SENSORS);
  259  1        memset(sliderQuery,0,sizeof(float) * SLIDER_SIZE);
  260  1        /*
  261  1        –ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—Å–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
  262  1        
  263  1          - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω. –ï—Å–ª–∏ —ç—Ç–æ 1,2,3 - —Ç–æ –∑–∞
             -–ø—É—Å–∫–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  264  1          -
  265  1        */
  266  1        
  267  1        
  268  1        T0 = 0xFFFF;
  269  1        T7R = 1;
  270  1        T8R = 1;
  271  1        
  272  1        HV_STATE = 1;
  273  1        //TO_DO –æ–∂–∏–¥–∞–µ–º –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
  274  1        
  275  1        
  276  1        T0R = 1;
  277  1        
  278  1      
  279  1      }
  280         
  281         void Process_Stop()
  282         {
  283  1        //PWM OFF
  284  1        T7R = 0;
  285  1        T8R = 0;
  286  1        //MAINTIMER OFF
  287  1        T0R = 0;
  288  1        //H-Bridge off
  289  1          KEY11_L = 0; KEY11_H = 0;
  290  1          KEY12_L = 0; KEY12_H = 0;
  291  1        HV_STATE = 0;
  292  1        
  293  1        
  294  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1204     --------
  NEAR-CONST SIZE  =           6     --------
C166 COMPILER V7.53.0.0, PROCESS                                                           08/29/2017 12:26:01 PAGE 6   

  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =          36     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          12     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
