C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 1   


C166 COMPILER V7.53.0.0, COMPILATION OF MODULE CAN
OBJECT MODULE PLACED IN can.OBJ
COMPILER INVOKED BY: C:\Keil\C166\BIN\C166.EXE can.c BROWSE MOD167 DEBUG TABS(2) 

 stmt lvl     source

    1         #include "can.h"
    2         #include "settings.h"
    3         #include "protocol.h"
    4         #include "system.h"
    5         #include "main.h"
    6         
    7         static uint8  txEnable = 0;
    8         
    9         uint16  packID = 0;     //ИД по к-ому передается пакет
   10         uint8   packIndex = 0;  //индекс передаваемого блока в пакете данных
   11         uint8   packCount = 0;  //кол-во блоков
   12         uint8   packLastSize = 0; //размер последнего блока
   13         uint8   *packData;          //оказатель на блок пакетов
   14         
   15         sbit CAN0IR = CAN_IC0^7;
   16         
   17         void CAN_Interrupt0() interrupt 0x54  
   18         {
   19  1        uint8 currentPackLen = 8;
   20  1      
   21  1        txEnable = 1;
   22  1        
   23  1        if(packIndex < packCount){
   24  2      
   25  2          if(packIndex == packCount - 1)
   26  2            if(packLastSize != 0)
   27  2              currentPackLen = packLastSize;
   28  2          
   29  2          CAN_SendMessageIT(packID, packData,currentPackLen);
   30  2          
   31  2            packData += 8;
   32  2            packIndex++;
   33  2        }
   34  1        
   35  1      
   36  1      }
   37         
   38         void CAN_Interrupt1() interrupt 0x55    
   39         {
   40  1        uint16 canID = ((CAN_Message_16[3].MOARH >> 2) & 0x07FF);
   41  1        uint8 *msgData = (uint8*)malloc(sizeof(uint8) * 8);
   42  1      
   43  1          *((uint16*)&msgData[0]) = CAN_Message_16[3].MODATALL;
   44  1          *((uint16*)&msgData[2]) = CAN_Message_16[3].MODATALH;
   45  1          *((uint16*)&msgData[4]) = CAN_Message_16[3].MODATAHL;
   46  1          *((uint16*)&msgData[6]) = CAN_Message_16[3].MODATAHH;
   47  1      
   48  1        Protocol_ReceiveMsgCallback(canID,msgData);
   49  1      
   50  1        free(msgData);
   51  1        
   52  1        
   53  1      }
   54         
   55         void CAN_Interrupt2() interrupt 0x56      
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 2   

   56         {
   57  1        uint16 canID = ((CAN_Message_16[4].MOARH >> 2) & 0x07FF);
   58  1        uint8 *msgData = (uint8*)malloc(sizeof(uint8) * 8);
   59  1      
   60  1          *((uint16*)&msgData[0]) = CAN_Message_16[4].MODATALL;
   61  1          *((uint16*)&msgData[2]) = CAN_Message_16[4].MODATALH;
   62  1          *((uint16*)&msgData[4]) = CAN_Message_16[4].MODATAHL;
   63  1          *((uint16*)&msgData[6]) = CAN_Message_16[4].MODATAHH;
   64  1      
   65  1        Protocol_ReceiveMsgCallback(canID,msgData);
   66  1      
   67  1        free(msgData);
   68  1      
   69  1      }
   70         void CAN_Interrupt3() interrupt CAN3IC_VEC      
   71         {
   72  1        uint8 *msgData = (uint8*)malloc(sizeof(uint8) * 8);
   73  1      
   74  1          *((uint16*)&msgData[0]) = CAN_Message_16[2].MODATALL;
   75  1          *((uint16*)&msgData[2]) = CAN_Message_16[2].MODATALH;
   76  1          *((uint16*)&msgData[4]) = CAN_Message_16[2].MODATAHL;
   77  1          *((uint16*)&msgData[6]) = CAN_Message_16[2].MODATAHH;
   78  1      
   79  1        Protocol_ReceiveMsgCallback(0x600,msgData);
   80  1      
   81  1        free(msgData);
   82  1      }
   83         void CAN_Interrupt4() interrupt CAN4IC_VEC
   84         {
   85  1        unsigned int far *pReprogWord = (unsigned int far *) 0x50000;
   86  1        
   87  1        uint8 msgData[8];
   88  1        uint32 serialNumber = 0;
   89  1        
   90  1          *((uint16*)&msgData[0]) = CAN_Message_16[5].MODATALL;
   91  1          *((uint16*)&msgData[2]) = CAN_Message_16[5].MODATALH;
   92  1          *((uint16*)&msgData[4]) = CAN_Message_16[5].MODATAHL;
   93  1          *((uint16*)&msgData[6]) = CAN_Message_16[5].MODATAHH;
   94  1        
   95  1        //тестовый код для запуска загрузчика
   96  1        //if(regID == 0x000)
   97  1          if(msgData[0] == 0xD2 && msgData[1] == 0x2D && msgData[2] == 0x00 && msgData[3] == 0x00 &&
   98  1             msgData[4] == 0xFF && msgData[5] == 0xFF && msgData[6] == 0xFF && msgData[7] == 0xFF)
   99  1            {
  100  2              //на запрос серийного номера, отправим серийный номер те
             -кущего устройства
  101  2              memcpy(msgData + 4,(uint32*)&SerialNumberBD,4);
  102  2              //и его аппаратный номер
  103  2              msgData[3] = HARDWARE_NUMBER;
  104  2              
  105  2              CAN_SendMessage(0x000,msgData,8);
  106  2              /*__asm
  107  2              {
  108  2                PUSH R2
  109  2                MOV R2 #1234H
  110  2                EXTS #05H #1H
  111  2                MOV 0000H R2
  112  2                POP R2
  113  2                
  114  2                SRST
  115  2              }*/
  116  2            }
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 3   

  117  1          if(msgData[0] == 0xD3 && msgData[1] == 0x3D && msgData[2] == 0x00){
  118  2            memcpy((uint32*)&serialNumber,(uint8*)msgData + 4,4);
  119  2            
  120  2            if(serialNumber == SerialNumberBD && msgData[3] == HARDWARE_NUMBER)
  121  2            {
  122  3              *pReprogWord = 0x1234;
  123  3              
  124  3              __asm {SRST};
  125  3            }
  126  2            /*
  127  2            msgData[3] - SubIndex
  128  2            msgData[4 - 7] - SerialNumber
  129  2            */
  130  2          }
  131  1      }
  132          
  133         void CAN_Init()
  134         {
  135  1        txEnable = 1;
  136  1        
  137  1        packID = 0;     //ИД по к-ому передается пакет
  138  1        packIndex = 0;  //индекс передаваемого блока в пакете данных
  139  1        packCount = 0;  //кол-во блоков
  140  1        packLastSize = 0; //размер последнего блока
  141  1        
  142  1        DP9 |= 0x003B;
  143  1        ALTSEL0P9 |= 0x0008;
  144  1        ALTSEL1P9 |= 0x0008;
  145  1        
  146  1        
  147  1        CAN_IC0 = 0x005C; //72Xh
  148  1        CAN_IC1 = 0x0060; //00Xh
  149  1        CAN_IC2 = 0x0074; //20Xh
  150  1        CAN_IC3 = 0x0064; //600h
  151  1        CAN_IC4 = 0x0068; //000h
  152  1        
  153  1        
  154  1        NCR0  = 0x0041;   //разрешаем вносить изменения в конфигурацию
  155  1        NPCR0 = 0x0003;   //Выбрали P9.2 для приема в CAN узел 0
  156  1        NBTR0 = 0x2344;   //скорость узла 500kb/sec при тактировании 16Мгц
  157  1        NCR0  = 0x0000;   //Запрет после реконфигурации
  158  1        
  159  1        /*
  160  1          Список областей сообщений
  161  1        
  162  1          На приём
  163  1            3. 00Хh - аварийное сообщение для CAN
  164  1            2. 20Хh - сообщение с данными от БДГП-С
  165  1          На передачу
  166  1            1. 000 - CAN сообщение с настраиваемым ID
  167  1            2. 722 - данные (прерывание)
  168  1            3. 280 - передача старт/стоп
  169  1        */
  170  1        //передача
  171  1        //000 - универсальный вар.
  172  1        CAN_Message_16[0].MOCTRH = 0x0E08;
  173  1        CAN_Message_16[0].MOCTRL = 0x0000;
  174  1        CAN_Message_16[0].MOIPRL = 0x0000;  /*выбор линии прерываний для передачи -
             - 0*/
  175  1        CAN_Message_16[0].MOFCRH = 0x0802; // DLC = 8, разрешить прерывание на переда
             -чу 
  176  1         
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 4   

  177  1        
  178  1        //72Xh
  179  1        /*CAN_Message_16[1].MOCTRH = 0x0080;
  180  1        CAN_Message_16[1].MOCTRL = 0x0000;
  181  1        CAN_Message_16[1].MOIPRL = 0x0000;  // выбор линии прерываний по приему - 0
  182  1        CAN_Message_16[1].MOFCRH = 0x0801;  // разрешить прерывание на прием
  183  1        
  184  1      */
  185  1        CAN_Message_16[2].MOCTRH = 0x0080;
  186  1        CAN_Message_16[2].MOCTRL = 0x0000;
  187  1        CAN_Message_16[2].MOIPRL = 0x0003;  //выбор линии прерываний для передачи -
             - 3
  188  1        CAN_Message_16[2].MOFCRH = 0x0801; // разрешить прерывание на прием 
  189  1        
  190  1      
  191  1        //32X
  192  1        CAN_Message_16[3].MOCTRH = 0x0080;
  193  1        CAN_Message_16[3].MOCTRL = 0x0000;
  194  1        CAN_Message_16[3].MOIPRL = 0x0001;  //выбор линии прерываний по приему - 1
  195  1        CAN_Message_16[3].MOFCRH = 0x0801;  //разрешить прерываение на прием
  196  1        
  197  1        //20X
  198  1        CAN_Message_16[4].MOCTRH = 0x0080;
  199  1        CAN_Message_16[4].MOCTRL = 0x0000;
  200  1        CAN_Message_16[4].MOIPRL = 0x0002;  // выбор линии прерываний по приему - 2
  201  1        CAN_Message_16[4].MOFCRH = 0x0801;  //разрешить прерываение на прием
  202  1        
  203  1        //000 - для запуска BSL
  204  1        CAN_Message_16[5].MOCTRH = 0x0080;
  205  1        CAN_Message_16[5].MOCTRL = 0x0000;
  206  1        CAN_Message_16[5].MOIPRL = 0x0004;  // выбор линии прерываний по приему - 4
  207  1        CAN_Message_16[5].MOFCRH = 0x0801;  //разрешить прерываение на прием 
  208  1      
  209  1      
  210  1        System_Delay(10);
  211  1        
  212  1        CAN_Message_16[0].MOARH = 0x8000;  // идентификатор 000(XXX)h - динамически ИД
  213  1        CAN_Message_16[0].MOAMRH = 0x3FFF; // маска идентификатора 
  214  1          
  215  1        /*CAN_Message_16[1].MOARH = 0x9C80;  // идентификатор 72Xh (X - 2,3,4)
  216  1        CAN_Message_16[1].MOAMRH = 0x3FE3; // маска идентификатора   
  217  1        */
  218  1        CAN_Message_16[2].MOARH = 0x9800;  // идентификатор 600h
  219  1        CAN_Message_16[2].MOAMRH = 0x3FFF; // маска идентификатора 
  220  1        
  221  1        CAN_Message_16[3].MOARH = 0x8888 + (HARDWARE_NUMBER << 2);   // идентификатор 222h
  222  1        CAN_Message_16[3].MOAMRH = 0x3FFF; // маска идентификатора
  223  1        
  224  1        CAN_Message_16[4].MOARH = 0x8600;  // идентификатор 180h
  225  1        CAN_Message_16[4].MOAMRH = 0x3FFF; // маска идентификатора 
  226  1        
  227  1        CAN_Message_16[5].MOARH = 0x8000;  // идентификатор 000h
  228  1        CAN_Message_16[5].MOAMRH = 0x3FFF; // маска идентификатора 
  229  1        
  230  1      
  231  1        System_Delay(10);
  232  1        
  233  1        PANCTR_H = 0x0100;         // message object 0 -> List 1
  234  1        PANCTR = 0x0002;           
  235  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();
  236  1         
  237  1         
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 5   

  238  1        PANCTR_H = 0x0101;         // message object 1 -> List 1
  239  1        PANCTR = 0x0002;             
  240  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); 
  241  1         
  242  1         
  243  1        PANCTR_H = 0x0102;         // message object 2 -> List 1
  244  1        PANCTR = 0x0002;             
  245  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();  
  246  1         
  247  1         
  248  1        PANCTR_H = 0x0103;         // message object 3 -> List 1
  249  1        PANCTR = 0x0002;             
  250  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  251  1      
  252  1      
  253  1        PANCTR_H = 0x0104;         // message object 4 -> List 1
  254  1        PANCTR = 0x0002;             
  255  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  256  1         
  257  1        PANCTR_H = 0x0105;         // message object 5 -> List 1
  258  1        PANCTR = 0x0002;             
  259  1         _nop_(); _nop_(); _nop_(); _nop_(); _nop_(); _nop_();   
  260  1         
  261  1          
  262  1      
  263  1      
  264  1        CAN_Message_16[0].MOCTRH = 0x0020; 
  265  1        CAN_Message_16[0].MOCTRL = 0x0000;
  266  1        
  267  1        CAN_Message_16[1].MOCTRH = 0x0020; 
  268  1        CAN_Message_16[1].MOCTRL = 0x0000;
  269  1        
  270  1        CAN_Message_16[2].MOCTRH = 0x0020; 
  271  1        CAN_Message_16[2].MOCTRL = 0x0000;
  272  1        
  273  1        CAN_Message_16[3].MOCTRH = 0x0020; 
  274  1        CAN_Message_16[3].MOCTRL = 0x0000;
  275  1        
  276  1        CAN_Message_16[4].MOCTRH = 0x0020; 
  277  1        CAN_Message_16[4].MOCTRL = 0x0000;  
  278  1        
  279  1        CAN_Message_16[5].MOCTRH = 0x0020; 
  280  1        CAN_Message_16[5].MOCTRL = 0x0000;  
  281  1        
  282  1        
  283  1      }
  284         void CAN_SendDataPackage(uint16 id,uint8  *pData, uint8 packSize)
  285         {
  286  1        packIndex = 0;
  287  1        packCount = packSize / 8;
  288  1        packLastSize = packSize % 8;
*** WARNING C192 IN LINE 288 OF can.c: '=': value truncated
  289  1          if(packLastSize > 0)
  290  1            packCount ++;
  291  1        
  292  1        packID = id;
  293  1        packData = pData;
  294  1      
  295  1          CAN0IR = 1; //инициируем передачу
  296  1          
  297  1      }
  298         void CAN_SendMessage(uint16 id,uint8 *pData,uint8 Len)
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 6   

  299         {
  300  1        CAN_SendMessageIT(id,pData,Len);
  301  1          System_Delay(400);
  302  1      }
  303         void CAN_SendMessageIT(uint16 id,uint8 *pData,uint8 Len)
  304         { 
  305  1        uint8 *moData = 0;
  306  1        uint8 index = 0;
  307  1        
  308  1        /*  while(txEnable == 0)
  309  1          {
  310  1            //if( ((NSR0 >> 7) & 0x1) == 1)
  311  1            if( (NSR0 & 0x7) != 0){ //проверка acknolegment 
  312  1              //IMDB_SendCanTransmitError(0);
  313  1              break;
  314  1            }
  315  1          }
  316  1      */
  317  1        CAN_Message_16[0].MOFCRH &= 0xF0FF;
  318  1        CAN_Message_16[0].MOFCRH |= (uint16) (Len<<8);
  319  1        
  320  1        CAN_Message_16[0].MOARH &= 0x8000;
  321  1        CAN_Message_16[0].MOARH |= (uint16)(id<<2);
  322  1        
  323  1        
  324  1        moData = (uint8*)&CAN_Message_16[0].MODATALL;
  325  1        
  326  1        for(index = 0;index<Len;index++)
  327  1        {
  328  2          *(moData + (index)) = *(pData + index);
  329  2        }
  330  1        
  331  1        txEnable = 0;
  332  1        
  333  1        CAN_Message_16[0].MOCTRH = 0x0100;  
  334  1        
  335  1        
  336  1      }
  337         /*
  338         void CAN_SendProtocolData(uint8 moNubmer,uint8  *pData, int packSize)
  339         {
  340           int msgCnt = packSize / 8;
  341           int lastMsgSize = packSize % 8;
  342           int i,j = 0;
  343           
  344           uint8 arrData[8];
  345           
  346           for(i = 0;i < msgCnt;i++)
  347           {
  348             for(j = 0;j<8;j++)
  349               arrData[j] = *(pData + j + (i*8));
  350             
  351             CAN_SendMessage(moNubmer,arrData,8);
  352           }
  353         }
  354         */


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =        1718     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
C166 COMPILER V7.53.0.0, CAN                                                               08/29/2017 12:26:01 PAGE 7   

  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =           8     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =          30     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
